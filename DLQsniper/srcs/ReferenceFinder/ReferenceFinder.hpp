/******************************************************************************/
/*                                                                            */
/*                                                                            */
/*    ReferenceFinder.hpp                              created by ccantale    */
/*                                                                            */
/*    project: DLQsniper                       claudio.cantale93@gmail.com    */
/*                                                                            */
/*                                                                            */
/******************************************************************************/

#ifndef REFERENCEFINDER_HPP
# define REFERENCEFINDER_HPP

# define MISSING_INPUT_FILE_ERROR	"ReferenceFinder: Couldn't find " INPUT_FILE ". It should be placed in the same folder as the executable."

//# define EMPTY_INPUT_FILE_ERROR		"ReferenceFinder: " INPUT_FILE " is empty."

# include <vector>
# include <string>
# include <iostream>
# include <cctype>
# include <fstream>
# include "../macros.h"

class	ReferenceFinder
{
	private:
		std::vector<std::string>	_references;
		short				_status;

	public:
						ReferenceFinder(void);
						~ReferenceFinder(void);
						ReferenceFinder(std::string filePath);
						ReferenceFinder(ReferenceFinder const &toCopy);
		ReferenceFinder			&operator=(ReferenceFinder const &toCopy);
		int				setRefs(std::string &filePath);
		std::vector<std::string>	&getRefs(void) const;

		class	RFException : public std::exception
		{
			private:
				std::string	_errorMsg = "ReferenceFinder error";

			public:
				RFException(void) {}
				RFException(std::string errorMsg) : _errorMsg(errorMsg)
				{
					std::cout << "ERROR GENERATED BY RFEXCEPTION" << std::endl;
					// Log::lerr << _errorMsg << std::endl;
					// Error::display(_errorMsg);
				}
				virtual const char	*what(void) const throw() {
					return (_errorMsg.c_str());
				}
		};
};

#endif
